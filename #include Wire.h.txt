#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <Ultrasonic.h>

#define TRIGGER_PIN    9    // Arduino pin tied to trigger pin on the ultrasonic sensor.
#define ECHO_PIN       10   // Arduino pin tied to echo pin on the ultrasonic sensor.
#define BUTTON_PIN     2    // Arduino pin tied to the push button.
#define SPEAKER_PIN    3    // Arduino pin tied to the speaker.
#define LCD_ADDRESS    0x3F // I2C address of the LCD display.
#define MAX_DISTANCE   200  // Maximum distance we want to ping for (in centimeters).
#define OFF_MODE       3    // Off mode
#define NUM_MODES      4    // Total number of modes

LiquidCrystal_I2C lcd(LCD_ADDRESS, 16, 2); // Initialize the LCD.
Ultrasonic ultrasonic(TRIGGER_PIN, ECHO_PIN); // Ultrasonic sensor setup.

int lastButtonState = LOW;   // Previous state of the button
int mode = 0;                // Current mode

// Define custom characters for emojis
byte customMosquito[8] = {
  B00100,
  B01010,
  B00100,
  B00000,
  B00100,
  B01010,
  B10101,
  B00000
};

byte customRat[8] = {
  B00100,
  B01110,
  B10101,
  B11011,
  B11110,
  B11110,
  B11110,
  B00000
};

byte customDetection[8] = {
  B00100,
  B01110,
  B10101,
  B11111,
  B11111,
  B11111,
  B01110,
  B00000
};

void setup() {
  Serial.begin(9600); // Start serial communication
  pinMode(BUTTON_PIN, INPUT_PULLUP); // Set button pin as input with internal pull-up resistor
  pinMode(SPEAKER_PIN, OUTPUT);
  
  lcd.init();         // Initialize the LCD
  lcd.backlight();    // Turn on the LCD backlight
  lcd.createChar(0, customMosquito); // Create custom characters
  lcd.createChar(1, customRat);
  lcd.createChar(2, customDetection);
  
  lcd.setCursor(0, 0);
  lcd.print("Electronic Pest");
  lcd.setCursor(0, 1);
  lcd.print("Repellent Start!");
  delay(2000); // Display message for 2 seconds
  
  // Display initial mode
  updateLCDMode();
}

void loop() {
  int buttonState = digitalRead(BUTTON_PIN);

  if (buttonState == LOW && lastButtonState == HIGH) {
    // Button is pressed
    mode = (mode + 1) % 4; // Cycle through modes (0, 1, 2, 3)
    updateLCDMode();
    Serial.print("Button Pressed. Button State: ");
    Serial.print(buttonState);
    Serial.print(", Mode: ");
    Serial.println(mode);
    delay(200); // Debounce delay
  }

  lastButtonState = buttonState; // Update last button state

  switch (mode) {
    case 0: // Mosquitos & Bugs Mode
      playTone(30); // Frequency in Hz: 20-35Hz
      break;
    case 1: // Rats Mode
      playTone(50); // Frequency in Hz: 35-60Hz
      break;
    case 2: // Detection Mode
      playTone(60); // Frequency in Hz: 40-70Hz
      break;
    case 3: // Off Mode
      noTone(SPEAKER_PIN); // Turn off speaker
      break;
    default:
      break;
  }
}

void updateLCDMode() {
  lcd.clear();
  lcd.setCursor(0, 0);
  switch (mode) {
    case 0:
      lcd.print("Mode: Mosquitos &");
      break;
    case 1:
      lcd.print("Mode: Rats       ");
      break;
    case 2:
      lcd.print("Mode: Detection  ");
      break;
    case 3:
      lcd.print("Mode: Off        ");
      break;
    default:
      lcd.print("Invalid Mode     ");
      break;
  }
  lcd.setCursor(7, 1); // Set cursor to the center of the second row
  switch (mode) {
    case 0:
      lcd.write(byte(0)); // Display customMosquito character
      break;
    case 1:
      lcd.write(byte(1)); // Display customRat character
      break;
    case 2:
      lcd.write(byte(2)); // Display customDetection character
      break;
    default:
      break;
  }
}

int getFrequencyForMode(int mode) {
  switch (mode) {
    case 0: return 30; // Mosquito mode: 20-35Hz
    case 1: return 50; // Rat mode: 35-60Hz
    case 2: return 60; // Detection mode: 40-70Hz
    default: return 0; // Off mode: No tone
  }
}

void playTone(int frequency) {
  unsigned long period = 1000000L / frequency;
  unsigned long duration = (mode == 2) ? 60000 : 0; // Play tone for 1 minute in Detection mode
  unsigned long startTime = millis();
  
  while (millis() - startTime < duration) {
    digitalWrite(SPEAKER_PIN, HIGH);
    delayMicroseconds(period / 2);
    digitalWrite(SPEAKER_PIN, LOW);
    delayMicroseconds(period / 2);
  }
}
